# Everything defined in this file have prefix PROD_ or (prod-)
# This contains everything to config production environment.
# Credentials are passed by setting environment variables.

# Database Settings

PROD_GCP_DB_KEY_FILE ?=
PROD_GCP_DB_PROJECT ?=
PROD_GCP_DB_REGION ?=
PROD_GCP_DB_INSTANCE ?=
PROD_GCP_DB_USERNAME ?=
PROD_GCP_DB_PASSWORD ?=

# Static IP Settings
PROD_GCP_IP_REGION ?=

# DNS Settings
PROD_GCP_DNS_PROJECT ?=
PROD_GCP_DNS_KEY_FILE ?=

# Other Settings

PROD_HELM_COMMON_FLAGS ?= $(HELM_COMMON_FLAGS) \
						--set externalDNS.google.project="$(PROD_GCP_DNS_PROJECT)" \
						--set nginx-ingress.controller.service.loadBalancerIP="$(PROD_GCP_LB_STATIC_IP)" \
						--set postgres.cloudsql.instances[0].instance="$(PROD_GCP_DB_INSTANCE)" \
						--set postgres.cloudsql.instances[0].project="$(PROD_GCP_DB_PROJECT)" \
						--set postgres.cloudsql.instances[0].region="$(PROD_GCP_DB_REGION)" \
						--set postgres.cloudsql.instances[0].port=5432

# Targets

prod-secret-database:
	$(KUBECTL) create secret generic database-secret \
		--from-file=instance-credential="$(PROD_GCP_DB_KEY_FILE)" \
		--from-literal=username="$(PROD_GCP_DB_USERNAME)" \
		--from-literal=password="$(PROD_GCP_DB_PASSWORD)"

prod-secret-dns:
	$(KUBECTL) create secret generic dns-secret \
		--from-file=credentials.json="$(PROD_GCP_DNS_KEY_FILE)"

prod-secret-jwt-public-key:
	$(KUBECTL) create secret generic auth0-secret --from-file=jwt.cert="$(PROD_JWT_PUBLIC_KEY_FILE)"

prod-static-ip:
	gcloud compute addresses create static-ip --region $(PROD_GCP_IP_REGION)
PROD_GCP_LB_STATIC_IP = $(shell gcloud compute addresses describe static-ip --region $(PROD_GCP_IP_REGION) --format="table[no-heading](address)" 2> /dev/null)

prod-prepare: prod-secret-database prod-secret-dns prod-static-ip env-cert-manager

prod-helm-init:
	kubectl create -f tiller-rbac-config.yaml
	$(HELM) init --service-account tiller

prod-update:
	$(HELM) dependency update

prod-install:
	$(HELM) install $(PROD_HELM_COMMON_FLAGS) --name $(HELM_RELEASE_NAME) .

prod-install-dryrun:
	$(HELM) install $(PROD_HELM_COMMON_FLAGS) --dry-run --debug .

prod-upgrade:
	$(HELM) upgrade --debug --dry-run --reset-values --force $(PROD_HELM_COMMON_FLAGS) $(HELM_RELEASE_NAME) .
	@echo confirm?
	@read _
	$(HELM) upgrade --reset-values --force $(PROD_HELM_COMMON_FLAGS) $(HELM_RELEASE_NAME) .

prod-status:
	$(HELM) status $(HELM_RELEASE_NAME)

prod-psql:
	export CONTAINER=$$(docker run --rm -d \
		-v "$(PROD_GCP_DB_KEY_FILE)":/config:ro \
		-p 127.0.0.1:5432:5432 \
		gcr.io/cloudsql-docker/gce-proxy:1.11 \
		/cloud_sql_proxy -credential_file=/config \
			-instances=$(PROD_GCP_DB_PROJECT):$(PROD_GCP_DB_REGION):$(PROD_GCP_DB_INSTANCE)=tcp:0.0.0.0:5432); \
	export PGPASSWORD="$(PROD_GCP_DB_PASSWORD)"; \
	psql "host=127.0.0.1 sslmode=disable dbname=$(PROD_GCP_DB_USERNAME) user=$(PROD_GCP_DB_USERNAME)"; \
	docker stop $$CONTAINER
