# Everything defined in this file have prefix ENV_ or (env-)
# Except CLI command names such as $(HELM) $(MINIKUBE) ...
# Note in any condition Docker client should be available in PATH. This makefile won't take care of Docker.
ENV_OS_NAME ?= $(shell uname -s)

ifeq ($(ENV_OS_NAME), Darwin)
GREP := grep -E
else
GREP := grep -P
endif

BREW := $(shell command -v brew 2> /dev/null)
env-brew:
ifdef BREW
	@echo brew ... check
	$(BREW) update
else ifeq ($(ENV_OS_NAME), Darwin)
	/usr/bin/ruby -e "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	brew update
else
	@echo not macOS, skipping Homebrew.
endif
BREW = HOMEBREW_NO_AUTO_UPDATE=1 $(shell command -v brew 2> /dev/null)

HELM := $(shell command -v helm 2> /dev/null)
env-helm: env-brew env-kubectl
ifdef HELM
	@echo helm ... check
else ifeq ($(ENV_OS_NAME), Darwin)
	$(BREW) install kubernetes-helm
	helm --help > /dev/null
else
	curl -Lo helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-rc.2-linux-amd64.tar.gz
	tar -xzf helm.tar.gz
	sudo mv linux-amd64/helm /usr/local/bin/
	rm -rf linux-amd64 helm.tar.gz
	helm --help > /dev/null
endif
HELM = $(shell command -v helm 2> /dev/null)

KUBECTL := $(shell command -v kubectl 2> /dev/null)
env-kubectl: env-brew
ifdef KUBECTL
	@echo kubectl ... check
else ifeq ($(ENV_OS_NAME), Darwin)
	$(BREW) install kubernetes-cli
	kubectl --help > /dev/null
else
	curl -LO https://storage.googleapis.com/kubernetes-release/release/$$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
	chmod +x ./kubectl
	sudo mv ./kubectl /usr/local/bin/kubectl
	kubectl --help > /dev/null
endif
KUBECTL = $(shell command -v kubectl 2> /dev/null)

MINIKUBE := $(shell command -v minikube 2> /dev/null)
env-minikube: env-kubectl env-brew
	docker images > /dev/null
ifdef MINIKUBE
	@echo minikube ... check
	$(MINIKUBE) status || $(MINIKUBE) start
else ifeq ($(ENV_OS_NAME), Darwin)
	$(BREW) cask install minikube

	curl -Lo docker-machine-driver-hyperkit https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit
	chmod +x docker-machine-driver-hyperkit
	sudo cp -f docker-machine-driver-hyperkit /usr/local/bin/
	rm -f docker-machine-driver-hyperkit
	sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit
	sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit

	minikube --alsologtostderr start --vm-driver hyperkit --kubernetes-version v1.10.6
else
	curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64
	chmod +x minikube
	sudo mv minikube /usr/local/bin/

	sudo CHANGE_MINIKUBE_NONE_USER=true minikube --alsologtostderr start --vm-driver none --kubernetes-version v1.10.6
endif
	# wait for booting
	JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; \
	until $(KUBECTL) get nodes -o jsonpath="$$JSONPATH" 2>&1 | $(GREP) -q "Ready=True"; do sleep 2; done
	minikube --alsologtostderr status
	if minikube addons list | grep 'ingress: enabled'; then \
		sudo minikube --alsologtostderr addons disable ingress; \
	fi
	if minikube addons list | grep 'kube-dns: disabled'; then \
		sudo minikube --alsologtostderr addons enable kube-dns; \
	fi
MINIKUBE = $(shell command -v minikube 2> /dev/null) --alsologtostderr

SQITCH := $(shell docker image inspect $(DOCKER_REGISTRY)/sqitch:$(BUILD_TAG) 2> /dev/null)
env-sqitch:
ifdef SQITCH
	@echo sqitch ... check
else
	$(MAKE) sqitch
	docker image inspect $(DOCKER_REGISTRY)/sqitch:$(BUILD_TAG) > /dev/null
endif
SQITCH = docker run --rm -it -v $$(realpath .)/applications/db-vcs/sqitch:/sqitch $(DOCKER_REGISTRY)/sqitch:$(BUILD_TAG) sqitch

env-cert-manager: env-helm
	$(HELM) install --name cert-manager --namespace kube-system \
		--set ingressShim.defaultIssuerName=default-issuer \
		--set ingressShim.defaultIssuerKind=Issuer \
		--set ingressShim.defaultACMEChallengeType=DNS01 \
		--set ingressShim.defaultACMEDNS01ChallengeProvider=default-dns01-provider \
		stable/cert-manager
	# wait for booting
	until $(KUBECTL) get deployment cert-manager -n kube-system -o jsonpath='{range @.status.conditions[*]}{@.type}={@.status};' 2>&1 | $(GREP) -q 'Available=True;'; do \
		sleep 2; \
	done

env-kubernetes: env-kubectl env-minikube env-helm
	# verify kubernetes is ready for use
	$(KUBECTL) cluster-info --request-timeout=10
	# install helm
	$(HELM) init --upgrade --wait
	# verify helm installed
	until $(HELM) list; do sleep 2; done

env-destroy-minikube:
	@echo destroying minikube cluster, press enter to confirm...
	@read _
	$(MINIKUBE) delete 

