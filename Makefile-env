# Everything defined in this file have prefix ENV_ or (env-)
# Except CLI command names such as $(HELM) $(MINIKUBE) ...
# Note in any condition Docker client should be available in PATH. This makefile won't take care of Docker.
ENV_OS_NAME ?= $(shell uname -s)

ifeq ($(ENV_OS_NAME), Darwin)
GREP := grep -E
TC := nc -zvG 3
else
GREP := grep -P
TC := nc -zvw 3
endif

BREW := $(shell command -v brew 2> /dev/null)
env-brew:
ifdef BREW
	@echo brew ... check
	$(BREW) update
else ifeq ($(ENV_OS_NAME), Darwin)
	/usr/bin/ruby -e "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	brew update
else
	@echo not macOS, skipping Homebrew.
endif
BREW = HOMEBREW_NO_AUTO_UPDATE=1 $(shell command -v brew 2> /dev/null)

HELM := $(shell command -v helm 2> /dev/null)
env-helm: env-kubectl
ifdef HELM
	@echo helm ... check
else ifeq ($(ENV_OS_NAME), Darwin)
	curl -Lo helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-rc.2-darwin-amd64.tar.gz
	tar -xzf helm.tar.gz
	sudo mv darwin-amd64/helm /usr/local/bin/
	rm -rf darwin-amd64 helm.tar.gz
	helm --help > /dev/null
else
	curl -Lo helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.10.0-rc.2-linux-amd64.tar.gz
	tar -xzf helm.tar.gz
	sudo mv linux-amd64/helm /usr/local/bin/
	rm -rf linux-amd64 helm.tar.gz
	helm --help > /dev/null
endif
	-helm plugin install https://github.com/mbenabda/helm-local-chart-version
HELM = $(shell command -v helm 2> /dev/null)

KUBECTL := $(shell command -v kubectl 2> /dev/null)
env-kubectl: env-brew
ifdef KUBECTL
	@echo kubectl ... check
else ifeq ($(ENV_OS_NAME), Darwin)
	$(BREW) install kubernetes-cli
	kubectl --help > /dev/null
else
	curl -LO https://storage.googleapis.com/kubernetes-release/release/$$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
	chmod +x ./kubectl
	sudo mv ./kubectl /usr/local/bin/kubectl
	kubectl --help > /dev/null
endif
KUBECTL = $(shell command -v kubectl 2> /dev/null)

MINIKUBE := $(shell command -v minikube 2> /dev/null)
env-minikube: env-kubectl env-brew
	docker images > /dev/null
ifdef MINIKUBE
	@echo minikube ... check
else ifeq ($(ENV_OS_NAME), Darwin)
	$(BREW) cask install minikube

	curl -Lo docker-machine-driver-hyperkit https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit
	chmod +x docker-machine-driver-hyperkit
	sudo cp -f docker-machine-driver-hyperkit /usr/local/bin/
	rm -f docker-machine-driver-hyperkit
	sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit
	sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit
else
	curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64
	chmod +x minikube
	sudo mv minikube /usr/local/bin/
endif
ifeq ($(ENV_OS_NAME), Darwin)
	minikube status || minikube --alsologtostderr start --vm-driver hyperkit --kubernetes-version v1.10.6
else
	minikube status || sudo CHANGE_MINIKUBE_NONE_USER=true minikube --alsologtostderr start --vm-driver none --kubernetes-version v1.10.6
endif
	# wait for booting
	JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; \
	until $(KUBECTL) get nodes -o jsonpath="$$JSONPATH" 2>&1 | $(GREP) -q "Ready=True"; do sleep 2; done
	minikube --alsologtostderr status
	if minikube addons list | grep 'ingress: enabled'; then \
		sudo minikube --alsologtostderr addons disable ingress; \
	fi
	if minikube addons list | grep 'kube-dns: disabled'; then \
		sudo minikube --alsologtostderr addons enable kube-dns; \
	fi
MINIKUBE = $(shell command -v minikube 2> /dev/null) --alsologtostderr

SQITCH := $(shell docker image inspect $(DOCKER_REGISTRY)/sqitch:$(BUILD_TAG) 2> /dev/null)
env-sqitch:
ifdef SQITCH
	@echo sqitch ... check
else
	$(MAKE) sqitch
	docker image inspect $(DOCKER_REGISTRY)/sqitch:$(BUILD_TAG) > /dev/null
endif
SQITCH = docker run --rm -it -v $$(realpath .)/applications/db-vcs/sqitch:/sqitch $(DOCKER_REGISTRY)/sqitch:$(BUILD_TAG) sqitch

env-cert-manager: env-helm
	$(HELM) install --wait --debug --name cert-manager --namespace kube-system \
		stable/cert-manager
	# wait for booting
	@until $(KUBECTL) get deployment cert-manager -n kube-system -o jsonpath='{range @.status.conditions[*]}{@.type}={@.status};' 2>&1 | $(GREP) -q 'Available=True;'; do \
		sleep 2; \
		echo keep waiting...; \
	done
	@echo done

env-kubernetes: env-kubectl env-minikube env-helm
	# verify kubernetes is ready for use
	$(KUBECTL) cluster-info --request-timeout=10
	# install helm
	$(HELM) init --upgrade --wait
	# verify helm installed
	until $(HELM) list; do sleep 2; done

env-destroy-minikube:
	@echo destroying minikube cluster, press enter to confirm...
	@read _
	$(MINIKUBE) delete 

env-destroy-cert-manager:
	$(HELM) delete --purge cert-manager

_NODE_NAME := networking-aio
_NODE_PROJECT := $(shell gcloud config get-value project)
_NODE_ZONE := $(shell gcloud config get-value compute/zone)
_NODE_HOST_NAME := $(_NODE_NAME).$(_NODE_ZONE).$(_NODE_PROJECT)
_LAUNCH_NODE := gcloud compute instances create \
			$(_NODE_NAME) --machine-type=f1-micro \
			--image=ubuntu-minimal-1804-bionic-v20180917 --image-project=ubuntu-os-cloud \
			--boot-disk-size=10GB --boot-disk-type=pd-standard --boot-disk-device-name=$(_NODE_NAME) \
			--maintenance-policy=MIGRATE \
			--service-account=$(_NODE_NAME)@$(_NODE_PROJECT).iam.gserviceaccount.com --scopes=https://www.googleapis.com/auth/cloud-platform \
			--tags=http-server,https-server
_VERIFY_NODE :=	gcloud compute instances list --format="table(NAME,EXTERNAL_IP,STATUS)" --filter="NAME:$(_NODE_NAME)" | tee /dev/stderr | grep RUNNING > /dev/null
_GET_NODE_IP := gcloud compute instances list --format="table[no-heading](EXTERNAL_IP)" --filter="NAME:$(_NODE_NAME)"
env-single-node-cluster:
	# verifying dependencies...
	@which bash
	@which tee
	@which grep
	@which ssh
	@which gcloud
	@which nc
	# bootstrap gcp vm instance, ensuring the cluster is up and running
	@if ! $(_VERIFY_NODE); then \
		$(_LAUNCH_NODE); \
		echo waiting for new node starting...; \
		until $(_VERIFY_NODE) && $(TC) $$($(_GET_NODE_IP)) 22 2> /dev/null; do \
			echo .; \
			sleep 2; \
		done; \
	fi
	# refresh gcloud ssh configs
	gcloud compute config-ssh --quiet > /dev/null
	# waiting for ssh start to work
	until ssh -o StrictHostKeyChecking=accept-new $(_NODE_HOST_NAME) echo it works!; do echo .; done
	# running install script through ssh
	echo ' \
		hostname; \
		id; \
		apt-get update; \
		apt-get install -y apt-transport-https ca-certificates curl software-properties-common git; \
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -; \
		add-apt-repository "deb https://download.docker.com/linux/$$(. /etc/os-release; echo "$$ID") $$(lsb_release -cs) stable"; \
		apt-get update && apt-get install -y docker-ce; \
		\
		curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -; \
		echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list; \
		apt-get update; \
		apt-get install -y kubelet kubeadm kubectl; \
		apt-mark hold kubelet kubeadm kubectl; \
	' | ssh $(_NODE_HOST_NAME) sudo bash -s