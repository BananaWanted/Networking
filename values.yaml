# with testing=true:
#   - deploy test image
#   - image includes testing frameworks (ipdb, pytest)
#   - image have abality to run test cases
#   - deploy & connect to a test db
# with testing=false:
#   - deploy prod image
#   - test cases are removed from images
#   - connect to prod db
testing: false
notTesting: true   # workaround the issue that currently no way to have logic not in requirements.yaml conditions

# Some values require override from main Makefile with values specified through Environment Variables.
# The name of the variables are documented as:  ENV: <Variable Name>

dockerRegistry: library   # docker registry path for image pulling.  ENV: DOCKER_REGISTRY
buildTag: latest             # the build tag to use.   ENV: BUILD_TAG
tlsSecret: tls-secret     # secret storing the tls certs for ingress.
databaseSecret: &databaseSecret database-secret  # secret for connecting to Cloud SQL database.
hosts:  # Ingress hosts. Accepts "*" as for default host. ENV: SERVICE_HOSTS
  - "*"

ACME:
  email: acme@a.com   # ENV: ACME_EMAIL
  dns:
    project: gcp-dns-project  # ENV: ACME_DNS_PROJECT
    secret: dns-secret
    secretKey: credentials.json

nginx-ingress:
  controller:
    kind: DaemonSet
    publishService:
      enabled: true # addressing https://github.com/kubernetes-incubator/external-dns/issues/223
    extraArgs:
      update-status-on-shutdown: "false"  # addressing https://github.com/kubernetes-incubator/external-dns/issues/414
      # default-ssl-certificate: default/tls-secret # overriding default cert, NO FAKE!
    service:
      externalTrafficPolicy: Local
      loadBalancerIP: 127.0.0.1 # AUTOENV: PROD_GCP_LB_STATIC_IP

externalDNS:
  nameOverride: external-dns
  provider: google
  policy: sync
  txtPrefix: ext-dns-
  rbac:
    create: true
  google:
    project: gcp-dns-project  # ENV: PROD_GCP_DNS_PROJECT
    serviceAccountSecret: dns-secret

postgres:
  existingSecret: *databaseSecret
  existingSecretKey: instance-credential
  cloudsql:
    instances:
    - project: project    # ENV: PROD_GCP_DB_PROJECT
      region: retion      # ENV: PROD_GCP_DB_REGION
      instance: instance  # ENV: PROD_GCP_DB_INSTANCE
      port: 5432

postgresTesting:
  nameOverride: postgres-testing
  postgresUser: postgres
  postgresPassword: postgres
  postgresConfig:
    logConnections: yes
    logHostname: yes
    logStatement: all
  persistence:
    enabled: false    # ENV: DEV_PERSIST_DB
  service:
    port: 5432

appConfigs:
  dns:
    type: service
    pullPolicy: IfNotPresent
    replicas: 1
    serviceType: ClusterIP
    tcpPorts: [80]
    udpPorts: []
    ingress:
    - path: "/ddns/"
    envPrefix: "SANIC_"
    envDatabase: true
    env:
      DDNS_ZONE: local  # ENV: DDNS_ZONE
      GOOGLE_APPLICATION_CREDENTIALS: /var/secrets/google/credentials.json
      WEB_CONCURRENCY: 1
    mountSecrets:
    - name: dns-secret
      path: /var/secrets/google/
  misc:
    type: service
    pullPolicy: IfNotPresent
    replicas: 1
    serviceType: ClusterIP
    tcpPorts: [80]
    udpPorts: []
    ingress:
    - path: "/generate_204"
      port: 80 # if absent the first port in tcpPorts will be used
    - path: "/server-info"
    envDatabase: false
    env:
      WEB_CONCURRENCY: 1
  db-vcs:
    type: task
    pullPolicy: IfNotPresent
    envDatabase: true
    maxRetrys: 1
    env:
      TZ: UTC
